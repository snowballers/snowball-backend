# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

      ## create application.properties
    - name: make application.properties
      run: |
        ## create application.properties
        cd ./src/main/resources

        # application.properties 파일 생성
        rm ./application.properties
        touch ./application.properties

        # Spring active profile 설정
        echo "${{ secrets.ACTIVE_PROFILE_PROD }}" >> ./application.properties
        
        # GitHub-Actions 에서 설정한 값을 application.yml 파일에 쓰기
        echo "${{ secrets.APPLICATION_PROD }}" >> ./application-prod.properties
      shell: bash

      ## gradle build
    - name: Build with Gradle
      run: ./gradlew bootJar

      ## 웹 이미지 빌드 및 도커허브에 push
    - name: API Dockerfile 빌드 후 Docker Hub push
      run: |
        docker login -u ${{ secrets.DOCKER_PROD_USERNAME }} -p ${{ secrets.DOCKER_PROD_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_PROD_USERNAME }}/${{ secrets.DOCKER_PROD_IMAGE_NAME }} .
        docker push ${{ secrets.DOCKER_PROD_USERNAME }}/${{ secrets.DOCKER_PROD_IMAGE_NAME }}

    - name: API 서버 docker-compose 실행 (SSH)
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ubuntu
        key: ${{ secrets.SERVER_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          docker login -u ${{ secrets.DOCKER_PROD_USERNAME }} -p ${{ secrets.DOCKER_PROD_PASSWORD }}
          docker-compose stop prod_api
          docker rm prod_api
          docker pull ${{ secrets.DOCKER_PROD_USERNAME }}/${{ secrets.DOCKER_PROD_IMAGE_NAME }}
          docker-compose up --no-start
          docker-compose start prod_api 
